#!/usr/bin/env node

/**
 * Script ki·ªÉm tra c·∫•u h√¨nh setup cho d·ª± √°n Qu·∫£n l√Ω Ph√≤ng Tr·ªç
 * Ch·∫°y: node scripts/check-setup.js
 */

const fs = require('fs');
const path = require('path');

console.log('\nüîç KI·ªÇM TRA C·∫§U H√åNH D·ª∞ √ÅN\n');
console.log('='.repeat(50));

let totalChecks = 0;
let passedChecks = 0;
let criticalErrors = [];
let warnings = [];

// Helper functions
function checkPassed(message) {
  console.log('‚úÖ', message);
  passedChecks++;
  totalChecks++;
}

function checkFailed(message, isCritical = true) {
  console.log(isCritical ? '‚ùå' : '‚ö†Ô∏è', message);
  if (isCritical) {
    criticalErrors.push(message);
  } else {
    warnings.push(message);
  }
  totalChecks++;
}

function checkInfo(message) {
  console.log('‚ÑπÔ∏è', message);
}

console.log('\nüì¶ 1. KI·ªÇM TRA C√ÄI ƒê·∫∂T NODE.JS\n');

// Check Node.js version
const nodeVersion = process.version;
const nodeMajorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);

if (nodeMajorVersion >= 18) {
  checkPassed(`Node.js version: ${nodeVersion} (‚úì >= 18)`);
} else {
  checkFailed(`Node.js version: ${nodeVersion} (C·∫ßn >= 18.0.0)`, true);
}

// Check npm
try {
  const { execSync } = require('child_process');
  const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
  checkPassed(`npm version: ${npmVersion}`);
} catch (error) {
  checkFailed('npm kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t', true);
}

console.log('\nüìÅ 2. KI·ªÇM TRA C·∫§U TR√öC D·ª∞ √ÅN\n');

// Check important directories
const importantDirs = [
  'src',
  'src/app',
  'src/components',
  'src/lib',
  'src/models',
  'node_modules'
];

importantDirs.forEach(dir => {
  const dirPath = path.join(process.cwd(), dir);
  if (fs.existsSync(dirPath)) {
    checkPassed(`Th∆∞ m·ª•c ${dir} t·ªìn t·∫°i`);
  } else {
    if (dir === 'node_modules') {
      checkFailed(`Th∆∞ m·ª•c ${dir} kh√¥ng t·ªìn t·∫°i. Ch·∫°y: npm install`, true);
    } else {
      checkFailed(`Th∆∞ m·ª•c ${dir} kh√¥ng t·ªìn t·∫°i`, true);
    }
  }
});

console.log('\n‚öôÔ∏è  3. KI·ªÇM TRA FILE C·∫§U H√åNH\n');

// Check .env.local
const envLocalPath = path.join(process.cwd(), '.env.local');
if (fs.existsSync(envLocalPath)) {
  checkPassed('File .env.local t·ªìn t·∫°i');
  
  // Read and check .env.local content
  const envContent = fs.readFileSync(envLocalPath, 'utf8');
  
  // Check MONGODB_URI
  if (envContent.includes('MONGODB_URI=')) {
    const mongoUriMatch = envContent.match(/MONGODB_URI=(.+)/);
    if (mongoUriMatch) {
      const mongoUri = mongoUriMatch[1].trim();
      
      // Check if it's not the default placeholder
      if (mongoUri.includes('username:password@cluster')) {
        checkFailed('MONGODB_URI v·∫´n ƒëang d√πng placeholder. C·∫ßn thay b·∫±ng URI th·∫≠t', true);
      } else if (mongoUri.includes('mongodb+srv://')) {
        // Check if database name is present
        const hasDbName = /mongodb\.net\/[^?]+\?/.test(mongoUri);
        if (hasDbName) {
          // Extract database name
          const dbNameMatch = mongoUri.match(/mongodb\.net\/([^?]+)\?/);
          const dbName = dbNameMatch ? dbNameMatch[1] : 'unknown';
          checkPassed(`MONGODB_URI c√≥ t√™n database: "${dbName}"`);
        } else {
          checkFailed('MONGODB_URI thi·∫øu T√äN DATABASE! Ph·∫£i th√™m t√™n database sau .net/ v√† tr∆∞·ªõc d·∫•u ?', true);
          checkInfo('   V√≠ d·ª•: ...mongodb.net/demophongtro?retryWrites=...');
        }
      } else {
        checkFailed('MONGODB_URI kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng', true);
      }
    }
  } else {
    checkFailed('Thi·∫øu MONGODB_URI trong .env.local', true);
  }
  
  // Check NEXTAUTH_SECRET
  if (envContent.includes('NEXTAUTH_SECRET=')) {
    const secretMatch = envContent.match(/NEXTAUTH_SECRET=(.+)/);
    if (secretMatch) {
      const secret = secretMatch[1].trim();
      if (secret === 'your-secret-key-here' || secret === 'your-secret-key-here-replace-with-random-string' || secret.length < 20) {
        checkFailed('NEXTAUTH_SECRET ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ho·∫∑c qu√° ng·∫Øn. C·∫ßn t·∫°o key ng·∫´u nhi√™n', true);
        checkInfo('   Windows: node -e "console.log(require(\'crypto\').randomBytes(32).toString(\'base64\'))"');
        checkInfo('   Mac/Linux: openssl rand -base64 32');
      } else {
        checkPassed('NEXTAUTH_SECRET ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh');
      }
    }
  } else {
    checkFailed('Thi·∫øu NEXTAUTH_SECRET trong .env.local', true);
  }
  
  // Check NEXTAUTH_URL
  if (envContent.includes('NEXTAUTH_URL=')) {
    const urlMatch = envContent.match(/NEXTAUTH_URL=(.+)/);
    if (urlMatch) {
      const url = urlMatch[1].trim();
      if (url === 'http://localhost:3000' || url.startsWith('https://')) {
        checkPassed(`NEXTAUTH_URL: ${url}`);
      } else {
        checkFailed('NEXTAUTH_URL kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng', false);
      }
    }
  } else {
    checkFailed('Thi·∫øu NEXTAUTH_URL trong .env.local', true);
  }
  
  // Check Cloudinary
  if (envContent.includes('NEXT_PUBLIC_CLOUD_NAME=')) {
    const cloudMatch = envContent.match(/NEXT_PUBLIC_CLOUD_NAME=(.+)/);
    if (cloudMatch) {
      const cloudName = cloudMatch[1].trim();
      if (cloudName === 'your-cloudinary-cloud-name' || cloudName.length < 3) {
        checkFailed('NEXT_PUBLIC_CLOUD_NAME ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh', false);
        checkInfo('   ƒêƒÉng k√Ω Cloudinary t·∫°i: https://cloudinary.com/');
      } else {
        checkPassed(`Cloudinary Cloud Name: ${cloudName}`);
      }
    }
  } else {
    checkFailed('Thi·∫øu NEXT_PUBLIC_CLOUD_NAME (Upload ·∫£nh c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông)', false);
  }
  
  if (envContent.includes('NEXT_PUBLIC_UPLOAD_PRESET=')) {
    const presetMatch = envContent.match(/NEXT_PUBLIC_UPLOAD_PRESET=(.+)/);
    if (presetMatch) {
      const preset = presetMatch[1].trim();
      if (preset === 'your-upload-preset' || preset.length < 3) {
        checkFailed('NEXT_PUBLIC_UPLOAD_PRESET ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh', false);
      } else {
        checkPassed(`Cloudinary Upload Preset: ${preset}`);
      }
    }
  } else {
    checkFailed('Thi·∫øu NEXT_PUBLIC_UPLOAD_PRESET (Upload ·∫£nh c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông)', false);
  }
  
} else {
  checkFailed('File .env.local kh√¥ng t·ªìn t·∫°i!', true);
  checkInfo('   T·∫°o file: cp env.example .env.local (Mac/Linux)');
  checkInfo('   T·∫°o file: Copy-Item env.example .env.local (Windows PowerShell)');
}

// Check package.json
const packageJsonPath = path.join(process.cwd(), 'package.json');
if (fs.existsSync(packageJsonPath)) {
  checkPassed('File package.json t·ªìn t·∫°i');
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    // Check important dependencies
    const requiredDeps = ['next', 'react', 'mongoose', 'next-auth'];
    const missingDeps = [];
    
    requiredDeps.forEach(dep => {
      if (!packageJson.dependencies || !packageJson.dependencies[dep]) {
        missingDeps.push(dep);
      }
    });
    
    if (missingDeps.length === 0) {
      checkPassed('T·∫•t c·∫£ dependencies quan tr·ªçng ƒë√£ c√≥ trong package.json');
    } else {
      checkFailed(`Thi·∫øu dependencies: ${missingDeps.join(', ')}`, true);
    }
    
  } catch (error) {
    checkFailed('Kh√¥ng th·ªÉ ƒë·ªçc package.json', true);
  }
} else {
  checkFailed('File package.json kh√¥ng t·ªìn t·∫°i', true);
}

// Summary
console.log('\n' + '='.repeat(50));
console.log('\nüìä K·∫æT QU·∫¢ KI·ªÇM TRA\n');

const successRate = totalChecks > 0 ? Math.round((passedChecks / totalChecks) * 100) : 0;

console.log(`T·ªïng s·ªë ki·ªÉm tra: ${totalChecks}`);
console.log(`ƒê√£ pass: ${passedChecks} ‚úÖ`);
console.log(`L·ªói nghi√™m tr·ªçng: ${criticalErrors.length} ‚ùå`);
console.log(`C·∫£nh b√°o: ${warnings.length} ‚ö†Ô∏è`);
console.log(`T·ª∑ l·ªá th√†nh c√¥ng: ${successRate}%`);

console.log('\n' + '='.repeat(50));

if (criticalErrors.length === 0 && warnings.length === 0) {
  console.log('\nüéâ HO√ÄN H·∫¢O! C·∫§U H√åNH ƒê√É S·∫¥N S√ÄNG!\n');
  console.log('B·∫°n c√≥ th·ªÉ ch·∫°y: npm run dev\n');
  process.exit(0);
} else if (criticalErrors.length === 0) {
  console.log('\n‚úÖ C·∫§U H√åNH C∆† B·∫¢N OK!\n');
  console.log('‚ö†Ô∏è  C√≥ m·ªôt s·ªë c·∫£nh b√°o nh·ªè:');
  warnings.forEach(w => console.log('   -', w));
  console.log('\nB·∫°n c√≥ th·ªÉ ch·∫°y: npm run dev');
  console.log('(Nh∆∞ng n√™n s·ª≠a c√°c c·∫£nh b√°o tr√™n)\n');
  process.exit(0);
} else {
  console.log('\n‚ùå C√íN M·ªòT S·ªê V·∫§N ƒê·ªÄ C·∫¶N S·ª¨A!\n');
  console.log('C√°c l·ªói nghi√™m tr·ªçng:');
  criticalErrors.forEach(e => console.log('   ‚ùå', e));
  
  if (warnings.length > 0) {
    console.log('\nC√°c c·∫£nh b√°o:');
    warnings.forEach(w => console.log('   ‚ö†Ô∏è ', w));
  }
  
  console.log('\nüìñ Xem h∆∞·ªõng d·∫´n chi ti·∫øt t·∫°i:');
  console.log('   - HUONG-DAN-SETUP.md');
  console.log('   - CHECKLIST-SETUP.md\n');
  
  process.exit(1);
}

